// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
const SENSOR_COMMUNITY_API = 'https://data.sensor.community/airrohr/v1'
const TARGET_SENSOR_ID = 77955
const USER_AGENT = 'Mozilla/5.0 (compatible; AirQualityBot/1.0)'

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (5 –º–∏–Ω—É—Ç)
const CACHE_DURATION = 5 * 60 * 1000
let dataCache = null

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
function parseSensorData(readings) {
  const data = {}
  
  for (const reading of readings) {
    const value = parseFloat(reading.value)
    if (isNaN(value)) continue
    
    switch (reading.value_type) {
      case 'P1': // PM10
        data.pm10 = value
        break
      case 'P2': // PM2.5
        data.pm25 = value
        break
      case 'temperature':
        data.temperature = value
        break
      case 'humidity':
        data.humidity = value
        break
      case 'pressure':
        data.pressure = value
        break
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (typeof data.pm25 !== 'number' || typeof data.pm10 !== 'number') {
    return null
  }
  
  return {
    timestamp: new Date().toISOString(),
    pm25: data.pm25,
    pm10: data.pm10,
    temperature: data.temperature,
    humidity: data.humidity,
    pressure: data.pressure
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç API
async function fetchSensorData() {
  try {
    const url = `${SENSOR_COMMUNITY_API}/sensor/${TARGET_SENSOR_ID}/`
    console.log(`Fetching from: ${url}`)
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': USER_AGENT
      }
    })
    
    if (!response.ok) {
      throw new Error(`API responded with ${response.status}`)
    }
    
    const data = await response.json()
    
    if (!Array.isArray(data) || data.length === 0) {
      throw new Error('No data received from API')
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
    const latest = data[0]
    console.log(`Received data from sensor ${latest.id} at ${latest.timestamp}`)
    
    return parseSensorData(latest.sensordatavalues)
    
  } catch (error) {
    console.error('Error fetching sensor data:', error)
    return null
  }
}

const worker = {
  async fetch(request, env) {
    const url = new URL(request.url)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ Next.js
    if (url.pathname.startsWith('/_next/static/')) {
      return env.ASSETS.fetch(request)
    }
    
    // API endpoint –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
    if (url.pathname === '/api/sensor') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (dataCache && Date.now() - dataCache.timestamp < CACHE_DURATION) {
        return new Response(JSON.stringify(dataCache.data), {
          headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          }
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      const current = await fetchSensorData()
      
      const responseData = {
        current: current || undefined,
        historical: []
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      dataCache = {
        data: responseData,
        timestamp: Date.now()
      }
      
      return new Response(JSON.stringify(responseData), {
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      })
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML –¥–∞—à–±–æ—Ä–¥
    const html = `
<!DOCTYPE html>
<html lang="ru" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–¥—É—Ö–∞ –≤ –ì–∞–∑–∏–ø–∞—à–µ</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {}
            }
        }
    </script>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-4 flex items-center justify-center gap-3">
                üå¨Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–¥—É—Ö–∞ –≤ –ì–∞–∑–∏–ø–∞—à–µ
            </h1>
            <p class="text-gray-400">–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞</p>
            <button id="refreshBtn" class="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
        </header>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h2 class="text-xl font-semibold mb-4">PM2.5</h2>
                <div id="pm25" class="text-4xl font-bold mb-2">-</div>
                <div class="text-sm text-gray-400 mb-2">¬µg/m¬≥</div>
                <div id="pm25Status" class="text-sm font-medium">-</div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <h2 class="text-xl font-semibold mb-4">PM10</h2>
                <div id="pm10" class="text-4xl font-bold mb-2">-</div>
                <div class="text-sm text-gray-400 mb-2">¬µg/m¬≥</div>
                <div id="pm10Status" class="text-sm font-medium">-</div>
            </div>
        </div>
        
        <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
            <div id="lastUpdate" class="text-center text-gray-400">
                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: -
            </div>
        </div>
        
        <div class="bg-gray-800 rounded-lg p-6 mb-8 border border-gray-700">
            <h2 class="text-xl font-semibold mb-4 flex items-center gap-2">
                üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            </h2>
            <p class="text-gray-400 mb-4">
                –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ Grafana:
            </p>
            <a href="https://api-rrd.madavi.de:3000/grafana/d/GUaL5aZMz/pm-sensors?orgId=1&var-chipID=esp8266-15072310&theme=light" 
               target="_blank" 
               class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
                üìà –û—Ç–∫—Ä—ã—Ç—å Grafana –¥–∞—à–±–æ—Ä–¥
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                </svg>
            </a>
            <div class="mt-4 text-sm text-gray-500">
                <strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Grafana:</strong> –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞, –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü—ã ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            </div>
        </div>
        
        <div class="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h2 class="text-xl font-semibold mb-6">‚ÑπÔ∏è –û –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h3 class="text-lg font-medium mb-3 text-blue-400">PM2.5 (–ú–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã)</h3>
                    <p class="text-gray-300 text-sm mb-4">
                        –ß–∞—Å—Ç–∏—Ü—ã –¥–∏–∞–º–µ—Ç—Ä–æ–º –º–µ–Ω–µ–µ 2.5 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤. –°–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –ø—Ä–æ–Ω–∏–∫–∞—Ç—å –≥–ª—É–±–æ–∫–æ –≤ –ª–µ–≥–∫–∏–µ –∏ –∫—Ä–æ–≤–µ–Ω–æ—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
                    </p>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span class="text-green-400">0-12 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–û—Ç–ª–∏—á–Ω–æ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-yellow-400">12-35 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–•–æ—Ä–æ—à–µ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-orange-400">35-55 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–£–º–µ—Ä–µ–Ω–Ω–æ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-red-400">55+ ¬µg/m¬≥</span>
                            <span class="text-gray-400">–ü–ª–æ—Ö–æ–µ</span>
                        </div>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-lg font-medium mb-3 text-blue-400">PM10 (–ö—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã)</h3>
                    <p class="text-gray-300 text-sm mb-4">
                        –ß–∞—Å—Ç–∏—Ü—ã –¥–∏–∞–º–µ—Ç—Ä–æ–º –º–µ–Ω–µ–µ 10 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤. –ú–æ–≥—É—Ç —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ —É—Ö—É–¥—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –ª–µ–≥–∫–∏—Ö.
                    </p>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span class="text-green-400">0-20 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–û—Ç–ª–∏—á–Ω–æ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-yellow-400">20-50 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–•–æ—Ä–æ—à–µ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-orange-400">50-100 ¬µg/m¬≥</span>
                            <span class="text-gray-400">–£–º–µ—Ä–µ–Ω–Ω–æ–µ</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-red-400">100+ ¬µg/m¬≥</span>
                            <span class="text-gray-400">–ü–ª–æ—Ö–æ–µ</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="text-center mt-8 text-sm text-gray-500">
            –î–∞—à–±–æ—Ä–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Cloudflare Workers! üéâ
        </div>
    </div>
    
    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ PM2.5
        function getAirQualityLevel(pm25) {
            if (pm25 <= 12) return { level: '–û—Ç–ª–∏—á–Ω–æ–µ', color: 'text-green-400' }
            if (pm25 <= 35) return { level: '–•–æ—Ä–æ—à–µ–µ', color: 'text-yellow-400' }
            if (pm25 <= 55) return { level: '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', color: 'text-orange-400' }
            if (pm25 <= 150) return { level: '–ü–ª–æ—Ö–æ–µ', color: 'text-red-400' }
            return { level: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ', color: 'text-purple-400' }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ PM10
        function getPM10Level(pm10) {
            if (pm10 <= 20) return { level: '–û—Ç–ª–∏—á–Ω–æ–µ', color: 'text-green-400' }
            if (pm10 <= 50) return { level: '–•–æ—Ä–æ—à–µ–µ', color: 'text-yellow-400' }
            if (pm10 <= 100) return { level: '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', color: 'text-orange-400' }
            return { level: '–ü–ª–æ—Ö–æ–µ', color: 'text-red-400' }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        async function loadData() {
            try {
                const response = await fetch('/api/sensor')
                const data = await response.json()
                
                if (data.current) {
                    const { pm25, pm10, timestamp } = data.current
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è PM2.5
                    document.getElementById('pm25').textContent = pm25.toFixed(2)
                    const pm25Quality = getAirQualityLevel(pm25)
                    const pm25StatusEl = document.getElementById('pm25Status')
                    pm25StatusEl.textContent = pm25Quality.level
                    pm25StatusEl.className = 'text-sm font-medium ' + pm25Quality.color
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è PM10
                    document.getElementById('pm10').textContent = pm10.toFixed(2)
                    const pm10Quality = getPM10Level(pm10)
                    const pm10StatusEl = document.getElementById('pm10Status')
                    pm10StatusEl.textContent = pm10Quality.level
                    pm10StatusEl.className = 'text-sm font-medium ' + pm10Quality.color
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const updateTime = new Date(timestamp).toLocaleString('ru-RU', {
                        timeZone: 'Europe/Istanbul',
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit'
                    })
                    document.getElementById('lastUpdate').textContent = \`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \${updateTime}\`
                } else {
                    document.getElementById('pm25').textContent = '-'
                    document.getElementById('pm10').textContent = '-'
                    document.getElementById('lastUpdate').textContent = '–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
                document.getElementById('pm25').textContent = '–û—à–∏–±–∫–∞'
                document.getElementById('pm10').textContent = '–û—à–∏–±–∫–∞'
                document.getElementById('lastUpdate').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadData()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(loadData, 5 * 60 * 1000)
        
        // –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('refreshBtn').addEventListener('click', loadData)
    </script>
</body>
</html>`
    
    return new Response(html, {
      headers: {
        'Content-Type': 'text/html; charset=UTF-8'
      }
    })
  }
}

export default worker 