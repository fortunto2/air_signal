export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ Next.js
    if (url.pathname.startsWith('/_next/static/')) {
      return env.ASSETS.fetch(request);
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ Next.js
    if (url.pathname === '/api/sensor') {
      // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const mockData = {
        current: {
          timestamp: new Date().toISOString(),
          pm25: 12.5,
          pm10: 18.3,
          temperature: 22.1,
          humidity: 65.2,
          pressure: 101325
        },
        historical: []
      };
      
      return new Response(JSON.stringify(mockData), {
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      });
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML
    const html = `
<!DOCTYPE html>
<html lang="ru" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–¥—É—Ö–∞ –≤ –ì–∞–∑–∏–ø–∞—à–µ</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {}
            }
        }
    </script>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-4">üå¨Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–¥—É—Ö–∞ –≤ –ì–∞–∑–∏–ø–∞—à–µ</h1>
            <p class="text-gray-400">–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞</p>
        </header>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-gray-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">PM2.5</h2>
                <div id="pm25" class="text-3xl font-bold text-green-400">-</div>
                <div class="text-sm text-gray-400">¬µg/m¬≥</div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">PM10</h2>
                <div id="pm10" class="text-3xl font-bold text-green-400">-</div>
                <div class="text-sm text-gray-400">¬µg/m¬≥</div>
            </div>
        </div>
        
        <div class="text-center">
            <p class="text-sm text-gray-400">
                –î–∞—à–±–æ—Ä–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Cloudflare Workers! üéâ<br>
                <a href="https://api-rrd.madavi.de:3000/grafana/d/GUaL5aZMz/pm-sensors?orgId=1&var-chipID=esp8266-15072310&theme=light" 
                   target="_blank" 
                   class="text-blue-400 hover:text-blue-300">
                    –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ Grafana ‚Üí
                </a>
            </p>
        </div>
    </div>
    
    <script>
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        async function loadData() {
            try {
                const response = await fetch('/api/sensor');
                const data = await response.json();
                
                if (data.current) {
                    document.getElementById('pm25').textContent = data.current.pm25.toFixed(1);
                    document.getElementById('pm10').textContent = data.current.pm10.toFixed(1);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(loadData, 5 * 60 * 1000);
    </script>
</body>
</html>`;
    
    return new Response(html, {
      headers: {
        'Content-Type': 'text/html; charset=UTF-8'
      }
    });
  }
}; 